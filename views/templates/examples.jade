mixin section(klass, headline, graph)
  h2.block(class=klass || '')= headline
  p.block= graph

+section(
  "section-split",
  "Example Notebooks",
  ""
)

p.block
  | The following links are to static copies of notebooks on our sharing
  | server.  On each page, you can view the contents of the notebook and
  | interact with it, but you can't change the contents or
  | run any code.  If you would like to change the content, you can
  | download the notebook from the sharing server and open it in Beaker.

.examples.padded
  .col.example
    .contents
      .col-1-3
        a(href='http://sharing.beakernotebook.com/gist/anonymous/c2849dc2cb9d4a20171b', target="_blank")
          img(src='img/example-recycling.jpg')
      .col-2-3
        a.headline(href='http://sharing.beakernotebook.com/gist/anonymous/c2849dc2cb9d4a20171b', target="_blank")
          h4 NYC Recycling Data
        p.
          This notebook explores NYC recycling using basic statistics and a recycling dataset made publicly available by the city of New York. The language of choice here is IPython, with pandas.

        ul.languages
          li.python.language
            .lang-block Py
  .col.example
    .contents
      .col-1-3
        a(href='http://sharing.beakernotebook.com/gist/anonymous/c43d96708cd58599beba', target="_blank")
          img(src='img/example-citibike.jpg')
      .col-2-3
        a.headline(href='http://sharing.beakernotebook.com/gist/anonymous/c43d96708cd58599beba', target="_blank")
          h4 NYC Citi Bike Data
        p.
          This notebook provides an example of how to mine publicly available Citi Bike data, using basic statistics to uncover interesting patterns. It uses IPython as the language of choice (with pandas and numpy). There's also some Groovy at the end to show how data can be passed between languages.
        ul.languages
          li.python.language
            .lang-block Py
          li.groovy.language
            .lang-block Gr
  .col.example
    .contents
      .col-1-3
        a(href='http://sharing.beakernotebook.com/gist/anonymous/47a0e193c3d01895f873', target="_blank")
          img(src='img/example-python.jpg')
      .col-2-3
        a.headline(href='http://sharing.beakernotebook.com/gist/anonymous/47a0e193c3d01895f873', target="_blank")
          h4 Python Demo
        p.
          IPython is the Python language with extensions for interactivity.  It can be installed along with Beaker by following the instructions on the Getting Started page of this website. This example notebook provides a brief tour of some the great thigns you can do with Ipython.


        ul.languages
          li.python.language
            .lang-block Py

  .col.example
    .contents
      .col-1-3
        a(href='http://sharing.beakernotebook.com/gist/anonymous/a119ba0126f280b2d041', target="_blank")
          img(src='img/example-r.jpg')
      .col-2-3
        a.headline(href='http://sharing.beakernotebook.com/gist/anonymous/a119ba0126f280b2d041', target="_blank")
          h4 R Demo
        p.
          The R Project for Statistical Computing publishes GNU R. It can be installed along with Beaker by following the instructions on the Getting Started page of this website. This example notebook provides a brief tour of some the great thigns you can do with R.

        ul.languages
          li.r.language
            .lang-block R

  .col.example
    .contents
      .col-1-3
        a(href='http://sharing.beakernotebook.com/gist/anonymous/5fcd0e4ec4e514429bb7', target="_blank")
          img(src='img/example-autotranslation.jpg')
      .col-2-3
        a.headline(href='http://sharing.beakernotebook.com/gist/anonymous/5fcd0e4ec4e514429bb7', target="_blank")
          h4 Autotranslation
        p.
          Beaker can autotranslate variables in one language to another.  You can access this feature with the notebook namespace: a collection of variables and their values stored in the notebook.  You can use this to produce data in one language, and consume or process it in another.

        ul.languages
          li.r.language
            .lang-block R
          li.javascript.language
            .lang-block Js
          li.groovy.language
            .lang-block Gr
          li.python.language
            .lang-block Py

  .col.example
    .contents
      .col-1-3
        a(href='http://sharing.beakernotebook.com/gist/anonymous/3fcbb2e8c0d67079d313', target="_blank")
          img(src='img/example-charting.jpg')
      .col-2-3
        a.headline(href='http://sharing.beakernotebook.com/gist/anonymous/3fcbb2e8c0d67079d313', target="_blank")
          h4 Interactive Charts
        p.
          Beaker comes with its own charting library for creating interactive plots.  It is implemented in JavaScript and takes the specification for the plot to make and the data to plot in JSON.  You can access it from any language, but it's easiest with Groovy, and this tutorial will show you how.  See the Levels of Detail tutorial for how to handle charts with many points.



        ul.languages
          li.groovy.language
            .lang-block Gr

  .col.example
    .contents
      .col-1-3
        a(href='http://sharing.beakernotebook.com/gist/anonymous/4855d54bba77ff51e5cc', target="_blank")
         img(src='img/example-lod.jpg')
      .col-2-3
        a.headline(href='http://sharing.beakernotebook.com/gist/anonymous/4855d54bba77ff51e5cc', target="_blank")
          h4 Charts with Level of Detail
        p.
          Although the interactivity and high resolution you get from Beaker's charting library are great, creating DOM elements for every single data point is memory and CPU intensive.  If implemented naively, your web browser would become sluggish or freeze if you tried to chart too much data.  Fortunately, Beaker recognizes this situation and has a solution: Levels of Detail.  If there are more than 1500 points, then instead of drawing them all, Beaker combines points into groups, and represents each group with its average, a box, or a river (min, max, and average).  But then, as you zoom into the data, it is resampled as appropriate for the current view, so the closer you look, the more there is to see, but you can still pull out and get the big picture while keeping the frame rate high.

        ul.languages
          li.groovy.language
            .lang-block Gr

  .cl
